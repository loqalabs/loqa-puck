name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: loqalabs/loqa-test-puck

jobs:
  test-go:
    name: Test Go Client
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        cache: true
        cache-dependency-path: test-go/go.sum

    - name: Install PortAudio dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev

    - name: Download dependencies
      run: |
        cd test-go
        go mod download

    - name: Run tests
      run: |
        cd test-go
        go test -v -race -coverprofile=coverage.out ./...

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./test-go/coverage.out
        flags: puck-go
        name: loqa-puck-go

    - name: Run go vet
      run: |
        cd test-go
        go vet ./...

    - name: Run staticcheck
      uses: dominikh/staticcheck-action@v1.3.0
      with:
        version: "2023.1.6"
        working-directory: test-go

  build-go:
    name: Build Go Client
    runs-on: ubuntu-latest
    needs: test-go
    
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Install PortAudio dependencies (Linux)
      if: matrix.os == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev

    - name: Build binary
      run: |
        cd test-go
        GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} \
        go build -v -ldflags="-w -s" -o bin/test-puck-${{ matrix.os }}-${{ matrix.arch }} ./cmd

    - name: Upload binary artifact
      uses: actions/upload-artifact@v3
      with:
        name: test-puck-${{ matrix.os }}-${{ matrix.arch }}
        path: test-go/bin/test-puck-${{ matrix.os }}-${{ matrix.arch }}*

  build-firmware:
    name: Build ESP32 Firmware
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up ESP-IDF
      uses: espressif/esp-idf-ci-action@v1
      with:
        esp_idf_version: v5.1
        target: esp32s3

    - name: Build firmware
      run: |
        cd firmware
        idf.py build

    - name: Upload firmware artifact
      uses: actions/upload-artifact@v3
      with:
        name: esp32-firmware
        path: firmware/build/*.bin

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test-go
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max